/**
* 매일 1명의 가수가 노래를 부름
* 출연 가수의 점수가 k번째 순위의 가수 점수보다 높으면, 출연 가수의 점수가 명예의 전당에 오름
* 우선순위의 큐: 들어간 순서에 상관없이 우선순위가 높은 데이터가 먼저 나오는 것
* 일반적인 큐: 먼저 집어넣은 데이터가 먼저 나오는 FIFO 구조로 저장하는 선형 자료구조
*/

function solution(k, score) {
    // 명예의 전당을 저장할 배열 선언 (최대 k개의 요소)
    const honor = [];
    // 각 라운드에서 명예의 전당 최하위 점수를 저장할 결과 배열
    const result = [];
    
    // 모든 점수를 순회하며 처리
    for (let i = 0; i < score.length; i++) {
        // 명예의 전당이 아직 k개의 점수를 채우지 못한 경우
        if (i < k) {
            // 현재 점수를 명예의 전당에 추가
            honor.push(score[i]);
        }
        
        // 현재 점수가 명예의 전당 최하위 점수보다 큰 경우
        if (score[i] > Math.min(...honor)) {
            // 명예의 전당에서 가장 작은 점수를 제거하고 새 점수로 대체
            honor.pop(); // 가장 작은 수를 제거
            honor.push(score[i]); // 새로운 점수 추가
            honor.sort((a, b) => b - a); // 내림차순 정렬하여 가장 작은 값이 마지막에 위치
        }
        
        // 결과 배열에 명예의 전당의 최하위 점수 추가
        result.push(honor.at(-1)); // 명예의 전당에서 가장 작은 점수를 결과에 추가
    }
    
    // 결과 반환
    return result;
}